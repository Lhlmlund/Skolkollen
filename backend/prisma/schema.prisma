generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Program {
  id          Int              @id @default(autoincrement())
  name        String           @db.VarChar(100)
  category    String?          @db.VarChar(50)
  description String?          @db.Text
  created_at  DateTime?        @default(now()) @db.Timestamp(0)
  suggestedIn QuizSubmission[] @relation("SuggestedProgram")
  schools     SchoolProgram[]

  @@map("program")
}

model School {
  id         Int              @id @default(autoincrement())
  name       String           @db.VarChar(120)
  city       String?          @db.VarChar(60)
  website    String?          @db.VarChar(255)
  created_at DateTime?        @default(now()) @db.Timestamp(0)
  events     OpenHouseEvent[]
  programs   SchoolProgram[]

  @@map("school")
}

model SchoolProgram {
  school_id  Int
  program_id Int
  school     School  @relation(fields: [school_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "school_program_ibfk_1")
  program    Program @relation(fields: [program_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "school_program_ibfk_2")

  @@id([school_id, program_id])
  @@index([program_id], map: "program_id")
  @@map("school_program")
}

model OpenHouseEvent {
  id        Int      @id @default(autoincrement())
  school_id Int
  starts_at DateTime @db.DateTime(0)
  info_url  String?  @db.VarChar(255)
  notes     String?  @db.VarChar(255)
  school    School   @relation(fields: [school_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "open_house_event_ibfk_1")

  @@index([school_id], map: "school_id")
  @@map("open_house_event")
}

model QuizQuestion {
  id               Int                @id @default(autoincrement())
  prompt           String             @db.VarChar(255)
  order_index      Int
  options          QuizOption[]
  SubmissionAnswer SubmissionAnswer[]

  @@map("quiz_question")
}

model QuizOption {
  id           Int                @id @default(autoincrement())
  question_id  Int
  label        String             @db.VarChar(255)
  program_hint String?            @db.VarChar(50)
  weight       Int?               @default(1)
  question     QuizQuestion       @relation(fields: [question_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "quiz_option_ibfk_1")
  answers      SubmissionAnswer[]

  @@index([question_id], map: "question_id")
  @@map("quiz_option")
}

model QuizSubmission {
  id                   String             @id @default(uuid()) @db.Char(36)
  created_at           DateTime?          @default(now()) @db.Timestamp(0)
  suggested_program_id Int?
  suggestedProgram     Program?           @relation("SuggestedProgram", fields: [suggested_program_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "quiz_submission_ibfk_1")
  answers              SubmissionAnswer[]

  @@index([suggested_program_id], map: "suggested_program_id")
  @@map("quiz_submission")
}

model SubmissionAnswer {
  submission_id String         @db.Char(36)
  question_id   Int
  option_id     Int
  submission    QuizSubmission @relation(fields: [submission_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "submission_answer_ibfk_1")
  question      QuizQuestion   @relation(fields: [question_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "submission_answer_ibfk_2")
  option        QuizOption     @relation(fields: [option_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "submission_answer_ibfk_3")

  @@id([submission_id, question_id])
  @@index([option_id], map: "option_id")
  @@index([question_id], map: "question_id")
  @@map("submission_answer")
}
